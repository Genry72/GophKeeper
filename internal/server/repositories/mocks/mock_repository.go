// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/repositories/interface.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	reflect "reflect"

	models "github.com/Genry72/GophKeeper/internal/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockIUsers is a mock of IUsers interface.
type MockIUsers struct {
	ctrl     *gomock.Controller
	recorder *MockIUsersMockRecorder
}

// MockIUsersMockRecorder is the mock recorder for MockIUsers.
type MockIUsersMockRecorder struct {
	mock *MockIUsers
}

// NewMockIUsers creates a new mock instance.
func NewMockIUsers(ctrl *gomock.Controller) *MockIUsers {
	mock := &MockIUsers{ctrl: ctrl}
	mock.recorder = &MockIUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsers) EXPECT() *MockIUsersMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockIUsers) FindByID(ctx context.Context, id int64) (*models.Users, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUsersMockRecorder) FindByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUsers)(nil).FindByID), ctx, id)
}

// FindByLogin mocks base method.
func (m *MockIUsers) FindByLogin(ctx context.Context, login string) (*models.Users, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", ctx, login)
	ret0, _ := ret[0].(*models.Users)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByLogin indicates an expected call of FindByLogin.
func (mr *MockIUsersMockRecorder) FindByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockIUsers)(nil).FindByLogin), ctx, login)
}

// Register mocks base method.
func (m *MockIUsers) Register(ctx context.Context, login, encryptPass string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, login, encryptPass)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIUsersMockRecorder) Register(ctx, login, encryptPass interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIUsers)(nil).Register), ctx, login, encryptPass)
}

// MockISecrets is a mock of ISecrets interface.
type MockISecrets struct {
	ctrl     *gomock.Controller
	recorder *MockISecretsMockRecorder
}

// MockISecretsMockRecorder is the mock recorder for MockISecrets.
type MockISecretsMockRecorder struct {
	mock *MockISecrets
}

// NewMockISecrets creates a new mock instance.
func NewMockISecrets(ctrl *gomock.Controller) *MockISecrets {
	mock := &MockISecrets{ctrl: ctrl}
	mock.recorder = &MockISecretsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISecrets) EXPECT() *MockISecretsMockRecorder {
	return m.recorder
}

// AddSecret mocks base method.
func (m *MockISecrets) AddSecret(ctx context.Context, userID, secretTypeID int64, secretName string, secretContent []byte) (models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecret", ctx, userID, secretTypeID, secretName, secretContent)
	ret0, _ := ret[0].(models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecret indicates an expected call of AddSecret.
func (mr *MockISecretsMockRecorder) AddSecret(ctx, userID, secretTypeID, secretName, secretContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecret", reflect.TypeOf((*MockISecrets)(nil).AddSecret), ctx, userID, secretTypeID, secretName, secretContent)
}

// DeleteSecret mocks base method.
func (m *MockISecrets) DeleteSecret(ctx context.Context, secretID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", ctx, secretID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockISecretsMockRecorder) DeleteSecret(ctx, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockISecrets)(nil).DeleteSecret), ctx, secretID)
}

// EditSecret mocks base method.
func (m *MockISecrets) EditSecret(ctx context.Context, secretName string, secretID int64, secretContent []byte) (models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditSecret", ctx, secretName, secretID, secretContent)
	ret0, _ := ret[0].(models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditSecret indicates an expected call of EditSecret.
func (mr *MockISecretsMockRecorder) EditSecret(ctx, secretName, secretID, secretContent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditSecret", reflect.TypeOf((*MockISecrets)(nil).EditSecret), ctx, secretName, secretID, secretContent)
}

// GetSecretByID mocks base method.
func (m *MockISecrets) GetSecretByID(ctx context.Context, userID, secretID int64) (models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByID", ctx, userID, secretID)
	ret0, _ := ret[0].(models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByID indicates an expected call of GetSecretByID.
func (mr *MockISecretsMockRecorder) GetSecretByID(ctx, userID, secretID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByID", reflect.TypeOf((*MockISecrets)(nil).GetSecretByID), ctx, userID, secretID)
}

// GetSecretTypes mocks base method.
func (m *MockISecrets) GetSecretTypes(ctx context.Context) ([]models.SecretType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretTypes", ctx)
	ret0, _ := ret[0].([]models.SecretType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretTypes indicates an expected call of GetSecretTypes.
func (mr *MockISecretsMockRecorder) GetSecretTypes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretTypes", reflect.TypeOf((*MockISecrets)(nil).GetSecretTypes), ctx)
}

// GetSecretsBySecretTypeID mocks base method.
func (m *MockISecrets) GetSecretsBySecretTypeID(ctx context.Context, userID, typeID int64) ([]models.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsBySecretTypeID", ctx, userID, typeID)
	ret0, _ := ret[0].([]models.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsBySecretTypeID indicates an expected call of GetSecretsBySecretTypeID.
func (mr *MockISecretsMockRecorder) GetSecretsBySecretTypeID(ctx, userID, typeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsBySecretTypeID", reflect.TypeOf((*MockISecrets)(nil).GetSecretsBySecretTypeID), ctx, userID, typeID)
}
